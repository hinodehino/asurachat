# -*- coding: utf-8 -*-
DEBUG = False
import json, requests, bs4, vk_api, urllib3, re, traceback
from datetime import datetime
from random import randint, choice, shuffle
from threading import Thread
from youtube_search import YoutubeSearch
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
 



def log(error):
    bot = Bot(dev, dev, None, None)
    bot.echo(traceback.format_exc(), keyboard=keyboard([('sleep', 'positive')]))


def admin(cmd, argl, args):
    bot = Bot(dev, dev, None, None)
    if self.id in [244494455, 507770054]:
        if cmd == 'exec':
           bot.echo(eval(argl))
        elif cmd == 'test':
            bot.echo('tested')
        elif cmd == 'echo':
            eval('self.echo(' + argl + ')')
        elif cmd == 'newkey':
            if len(args) > 3:
                base = openjson(args[0] + '.json')
                if args[1] == 'foreach':
                    for k in base.keys():
                        base[k][args[2]] = args[3] if not args[3].isnumeric() else int(args[3])
                elif args[1] == 'global':
                    base[args[2]] = args[3] if not args[3].isnumeric() else int(args[3])
                rewritejson(args[0] + '.json', base)
                bot.echo('succesful')
        elif cmd == 'rnkey':
            if len(args) >= 4:
                base = openjson(args[0] + '.json')
                if args[1] == 'foreach':
                    for k in base.keys():
                        val = base[k][args[2]]
                        del base[k][args[2]]
                        base[k][args[3]] = val
                elif args[1] == 'global':
                    val = base[args[2]]
                    del base[args[2]]
                    base[args[3]] = val
                rewritejson(args[0] + '.json', base)
                bot.echo('succesful')


def sleep(msg, frm):
    if msg == 'sleep' and frm in admins:
        bot = Bot(dev, dev, None, None)
        bot.echo('üí§')
        exit()


def openjson(f):
    return json.loads(open(f, encoding='utf-8').read())


def rewritejson(f, d):
    open(f, 'w', encoding='utf-8').write(json.dumps(d, ensure_ascii=False))


def getUser(id_, key=None):
    users = openjson('users.json')
    if str(id_) not in users:
        users[str(id_)] = {
            'name': vk.users.get(user_ids=id_)[0]['first_name'] if id_ > 0 else vk.groups.getById(group_ids=int(str(id_)[1:]))[0]['name'],
            'playname': vk.users.get(user_ids=id_)[0]['first_name'] if id_ > 0 else vk.groups.getById(group_ids=int(str(id_)[1:]))[0]['name'],
            'tip': '',
            'reps': 0,
            'likes': 0,
            'repsids': [],
            'likesids': [],
            'balance': 50,
            'chatscore': 0,
            'gamescore': 0,
            'inventory': [],
            'mention': 1
        }
        rewritejson('users.json', users)
    if key:
        if key not in users[str(id_)]:
            return
        return users[str(id_)][key]
    return users[str(id_)]


def updateUser(id_, key, act, value):
    getUser(id_)
    users = openjson('users.json')
    if act == '=':
       users[str(id_)][key] = value
    elif act == '+=':
       users[str(id_)][key] += value
    elif act == '-=':
        users[str(id_)][key] -= value
    rewritejson('users.json', users)


def getNamel(id_, key=None):
    user = getUser(id_)
    mention = getUser(id_, key='mention')
    if key:
        if key in user:
            name = user[key]
        else:
            name = user['name']
    else:
        name = user['name']
    if mention:
        if id_ > 0:
            return f'[id{id_}|{name}]'
        return f'[club{str(id_)[1:]}|{name}]'
    return user[name]


def formLink(id_, s):
    mention = getUser(id_, key='mention')
    if mention:
        if id_ > 0:
            return f'[id{id_}|{s}]'
        else:
            return f'[club{str(id_)[1:]}|{s}]'
    else:
        return s


def checkSpelling(string):
    admiss = True if 2 <= len(string) <= 40 else False
    alphabet = 'abcdefghijklmnopqrstuvwxyz–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è0123456789 '
    for s in string:
        if s.lower() not in alphabet:
            admiss = False
    return admiss


def keyboard(*b):
    buttons = []
    for i in b:
        buttons.append([])
        for j in i:
            buttons[-1].append({
                'action': {
                    'type': 'text',
                    'label': j[0]
                },
                'color': j[1]
            })
    return json.dumps({'buttons': buttons, 'inline': True})


def tags(s):
    r, f = '', True
    for i in list(s):
        if f:
            if i == '<':
                f = False
            else:
                r += i
        else:
            if i == '>':
                f = True
    return r


def ids(m):
    if m:
        mentions = m.replace('[', '$sep').replace(']', '$sep').replace('|', '$sep').split('$sep')
        users = [int(m[2:]) for m in mentions if m[:2] == 'id' and m[2:].isdigit()]
        groups = [int('-' + m[4:]) for m in mentions if m[:4] == 'club' and m[4:].isdigit()]
        return users + groups
    return []


def parsementions(s, key=None):
    newstring = s
    names = {}
    m = s.replace('[', '$sep').replace(']', '$sep').replace('|', '$sep').split('$sep')
    fs = []
    for i in range(len(m)):
        if fs:
            if m[i] in fs[-1]:
                continue
        if (m[i][:2] == 'id' and m[i][2:].isdigit()) or (m[i][:4] == 'club' and m[i][4:].isdigit()):
            fs.append([m[i], m[i + 1]])
    for f in fs:
        digitid = int(f[0][2:]) if f[0][:2] == 'id' else int('-' + f[0][4:])
        mention = getUser(digitid, key='mention')
        if key:
            name = getUser(digitid, key=key)
        else:
            name = getUser(digitid, key='name')
        if mention:
            newstring = newstring.replace(f'[{f[0]}|{f[1]}]', f'[{f[0]}|{name}]')
        else:
            newstring = newstring.replace(f'[{f[0]}|{f[1]}]', name)
    return newstring


def getimage(url):
    http = urllib3.PoolManager()
    return {'file': (url, http.request('GET', url, preload_content=False).data)}


def getgif(url, count):
    http = urllib3.PoolManager()
    gifs = json.loads(requests.get(url).text)['data']
    if gifs:
        target = choice(gifs[:count])['images']['downsized']['url']
        return {'file': (target, http.request('GET', target, preload_content=False).data)}
    return None


def uploadfile(file, peer):
    server = vk.docs.getMessagesUploadServer(type='doc', peer_id=peer)
    uploaded_file = json.loads(requests.post(server['upload_url'], files=file).text)['file']
    doc = vk.docs.save(file=uploaded_file, title='asura-bot')['doc']
    id_, ownerid = doc['id'], doc['owner_id']
    return f'doc{ownerid}_{id_}'


def uploadvideo(server):
    return json.loads(requests.post(server, files=file).text)['video_id']


def uploadimage(file, peer):
    server = vk.photos.getMessagesUploadServer(peer_id=peer)
    uploaded_file = json.loads(requests.post(server['upload_url'], files=file).text)
    photo = vk.photos.saveMessagesPhoto(
        server=uploaded_file['server'],
        photo=uploaded_file['photo'],
        hash=uploaded_file['hash'])[0]
    id_, ownerid = photo['id'], photo['owner_id']
    return f'photo{ownerid}_{id_}'


def getAvatar(id_, peer):
    if id_ > 0:
        resolve = vk.users.get(user_ids = id_, fields = ['photo_id'])[0]
        if 'photo_id' in resolve:
            return 'photo' + resolve['photo_id']
        else:
            return 'photo-187703257_457239149'
    else:
        resolve = vk.groups.getById(group_ids = str(id_)[1:], fields = ['photo_200'])[0]
        if 'photo_200' in resolve:
            return uploadimage(getimage(resolve['photo_200']), peer)
        else:
            return 'photo-187703257_457239149'


#init
class Bot:
    def __init__(self, userId, peerId, chatId, reply):
        self.peer = peerId
        self.chat = chatId
        self.id = userId
        self.reply = reply
        self.user = getUser(self.id)
        self.playname = getNamel(self.id, key='playname')
        self.name = getNamel(self.id)
        self.cmdsinfo = {
            '–ø–æ–º–æ—â—å': 'üí≠ –ø–æ–º–æ—â—å - FAQ.\nüí≠ –ø–æ–º–æ—â—å (–∫–æ–º–∞–Ω–¥–∞) - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ.',
            '—Å—Ç–∞—Ç—É—Å': 'üí≠ —Å—Ç–∞—Ç—É—Å - —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å.\nüí≠ –ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π.',
            '–∏–º—è': 'üí≠ –∏–º—è (...) - –∏–∑–º–µ–Ω—è–µ—Ç —Ç–≤–æ–µ –∏–º—è –≤ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\nüí≠ –∏–º—è –∏–≥—Ä–æ–≤–æ–µ (...) - –∏–∑–º–µ–Ω—è–µ—Ç —Ç–≤–æ–µ –∏–º—è –≤ –∏–≥—Ä–∞—Ö.\nüí≠ –¢–∞–∫–∂–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–±—Ä–æ—Å–∏—Ç—å –∏–º—è, –æ—Ç–ø—Ä–∞–≤—å "–∏–º—è (–∏–≥—Ä–æ–≤–æ–µ) —Å–±—Ä–æ—Å–∏—Ç—å", –∏–ª–∏ –Ω–∞–π–¥–∏ –∫–Ω–æ–ø–∫—É –≤ —Å–≤–æ–µ–º —Å—Ç–∞—Ç—É—Å–µ.',
            '–∑–∞–º–µ—Ç–∫–∞': 'üí≠ –∑–∞–º–µ—Ç–∫–∞ (...) - –º–µ–Ω—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –≤ —Å—Ç–∞—Ç—É—Å–µ.',
            '–ø–∞—Ä–∞': 'üí≠ –ø–∞—Ä–∞ - –∏—â–µ—Ç –¥–ª—è —Ç–µ–±—è –ø–∞—Ä—É –≤ –±–µ—Å–µ–¥–µ.\nüí≠ –ú–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–∞—Ä—É –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π.',
            '–≥–∏—Ñ': 'üí≠ –≥–∏—Ñ (—Ç–µ–≥) (—Ä–∞–Ω–¥–æ–º –æ—Ç 1 –¥–æ 100) - –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≥–∏—Ñ–∫—É.',
            '—Ä–ø': 'üí≠ —Ä–ø (—Å–∏–º–≤–æ–ª –¥–µ–π—Å—Ç–≤–∏—è)(...) - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã.\nüí≠ –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–æ–º —Ä–æ–ª–ø–ª–µ–µ—Ä–æ–º, —Ç–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π. (–¢—ã): *(–¥–µ–π—Å—Ç–≤–∏–µ) (–ò–≥—Ä–æ–∫)*',
            '—Ñ—Ä–∞–∑–∞': 'üí≠ —Ñ—Ä–∞–∑–∞ (–∫–æ–ª-–≤–æ —Å–ª–æ–≤) - –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–±—Ä–∞—Ç—å –∏–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ —Ñ—Ä–∞–∑—É.',
            '—é—Ç—É–±': 'üí≠ —é—Ç—É–± (—Ç–µ–≥) - –Ω–∞—Ö–æ–¥–∏—Ç –≤–∏–¥–µ–æ –Ω–∞ —é—Ç—É–±–µ.',
            '–º–∞–≥–∞–∑–∏–Ω': 'üí≠ –º–∞–≥–∞–∑–∏–Ω - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω.',
            '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å': 'üí≠ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.üí≠ –ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π.',
            '—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ': 'üí≠ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–≤—ã–∫–ª/–≤–∫–ª) - –æ—Ç–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤–∫–ª—é—á–∞–µ—Ç @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —á–∞—Ç–µ. –û—á–µ–Ω—å –ø–æ–º–æ–∂–µ—Ç —Ç–µ–º, –∫–æ–º—É –Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞.',
        }


    #echo 
    def echo(self, *args, attach='', keyboard={}, peer=None, chat=None, sticker_id=0):
        peer = self.peer if not peer else peer
        chat = self.chat if not chat else chat
        if self.chat:
            vk.messages.send(
                chat_id = chat,
                message = ''.join(args) if all([True if str(i) == i else False for i in args]) else args,
                attachment = attach,
                keyboard = keyboard,
                sticker_id = sticker_id,
                random_id = 0)   
        else:
            vk.messages.send(
                peer_id = peer,
                message = ''.join(args) if all([True if str(i) == i else False for i in args]) else args,
                attachment = attach,
                keyboard = keyboard,
                sticker_id = sticker_id,
                random_id = 0)   


    #handle
    def handle(self, msg):
        if '[club187703257|' in msg:
            msg = msg.split(']')[0].strip(',').strip(' ')

        if msg == '–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏–º–µ–Ω–∞':
            self.handle('–∏–º—è —Å–±—Ä–æ—Å–∏—Ç—å')
            self.handle('–∏–º—è —Ä–ø —Å–±—Ä–æ—Å–∏—Ç—å')
            self.handle('–∏–º—è –∏–≥—Ä–æ–≤–æ–µ —Å–±—Ä–æ—Å–∏—Ç—å')
        elif ''.join(msg.split()).lower() in ['^^vv<><>ba', 'uuddlrlrba', 'upupdowndownleftrightleftrightba', '–≤–≤–µ—Ä—Ö–≤–≤–µ—Ä—Ö–≤–Ω–∏–∑–≤–Ω–∏–∑–≤–ª–µ–≤–æ–≤–ø—Ä–∞–≤–æ–≤–ª–µ–≤–æ–≤–ø—Ä–∞–≤–æba']:
            self.echo(attach='photo244494455_457253498')

        cmd, args, argl = '', [], ''
        msg_splitted = msg.split(' ', 1)
        cmd = msg_splitted[0].lower()
        if len(msg_splitted) > 1:
            args = msg_splitted[1].split()
            argl = msg_splitted[1]

        if DEBUG:
            if cmd in self.cmdsinfo.keys():
                print(f'\n"{msg}" at', str(datetime.now())[:-4])
        
        if cmd == 'ü§ù':
            if argl:
                if ids(argl):
                    uid = ids(argl)[0]
                    if uid == self.id:
                        return self.echo(f'{self.name}, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–∞–∂–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ üòî')
                    if self.id in getUser(uid, key='repsids'):
                        return self.echo(f'{self.name}, —Ç—ã —É–∂–µ –æ–∫–∞–∑—ã–≤–∞–ª —É–≤–∞–∂–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é üòî')
                    updateUser(uid, 'reps', '+=', 1)
                    updateUser(uid, 'repsids', '+=', [self.id])
                    return self.echo(f'{formLink(uid, "+ü§ù")} –æ—Ç {self.name}.')

        elif cmd == '‚ù§':
            if argl:
                if ids(argl):
                    uid = ids(argl)[0]
                    if uid == self.id:
                        return self.echo(f'{self.name}, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ª–∞–π–∫–Ω—É—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è üòî')
                    if self.id in getUser(uid, key='likesids'):
                        return self.echo(f'{self.name}, —Ç—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üòî')
                    updateUser(uid, 'likes', '+=', 1)
                    updateUser(uid, 'likesids', '+=', [self.id])
                    return self.echo(f'{formLink(uid, "+‚ù§")} –æ—Ç {self.name}.')

        elif cmd == '—Ä–ø':
            if not argl:
                return self.echo(self.cmdsinfo['—Ä–ø'])
            prefix = ''
            for s in argl:
                if s in '"*/<[{(@#$%^&-=+_':
                    prefix += s
                else:
                    break
            if prefix:
                argl = argl[len(prefix):].strip()
                argl = prefix + argl.replace('"', '\"')
                pairs = {
                    '[': ']',
                    '{': '}',
                    '(': ')',
                    '<': '>'
                }
                affix = ''.join([pairs[s] if s in pairs.keys() else s for s in prefix[::-1]])
            uid = None
            if self.reply:
                uid = self.reply['from_id']
            if uid == self.id:
                uname = self.playname
            else:
                uname = getNamel(uid, key='playname')
            if uid:
                argl += f' {uname}{affix}'
            else:
                argl += affix
            parsed = parsementions(argl, key='playname')
            return self.echo(f'{formLink(self.id, self.playname)}: {parsed}')
            for s in argl:
                if s in '"*/[{(@#$%^&-=+':
                    argl = argl.replace(s, '$')
            argl = argl.replace('$', '')
            return self.echo(f'{formLink(self.id, self.playname)}: "{parsementions(argl, key="playname")}"')

        elif cmd == '—Ñ—Ä–∞–∑–∞':
            return
            c = randint(1, 15)
            if argl and argl.isnumeric():
                if int(argl) > 15:
                    return self.echo(f'‚úã {self.name}, –Ω–µ –±–æ–ª–µ–µ 15 —Å–ª–æ–≤.')
                elif int(argl) <= 0:
                    return self.echo(self.cmdsinfo['—Ñ—Ä–∞–∑–∞'])
                c = randint(1, int(argl))
            words = open('words').read().split()
            affixes = '–∞ –Ω–æ –≤–µ–¥—å —á—Ç–æ–±—ã —á—Ç–æ –∏–±–æ —Ç–∞–∫-–∫–∞–∫ —Ç.–∫. —Ç–∫ –ø–æ—Ç–æ–º—É-—á—Ç–æ –ø–æ—Ç–æ–º—É—á—Ç–æ –ø–æ—Ç–æ–º—É –ø–æ—ç—Ç–æ–º—É —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏—Ç–∞–∫'
            sentence = Phrase(words).gen(size=c)
            return self.echo(sentence)

        elif cmd == '–∏–º—è':
            if argl:
                if args[0] == '–∏–≥—Ä–æ–≤–æ–µ':
                    names = {}
                    for k, v in openjson('users.json').items():
                        names[k] = v['playname']
                    formtype = '–∏–≥—Ä–∞—Ö'
                    keytype = 'playname'
                else:
                    names = {}
                    for k, v in openjson('users.json').items():
                        names[k] = v['name']
                    formtype = '–æ–±—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö'
                    keytype = 'name'
                if len(args[0]) > 1:
                    busy = False
                    for k, v in names.items():
                        if v.lower() == argl.lower():
                            if k == str(self.id):
                                busy = True
                    if not busy:
                        for s in argl:
                            if s == '—Å–±—Ä–æ—Å–∏—Ç—å':
                                if str(self.id) in names:
                                    del names[str(self.id)]
                                name = vk.users.get(user_ids=self.id)[0]['first_name']
                                updateUser(self.id, keytype, '=', name)
                                return self.echo(f'‚úÖÔ∏è –¢—ã —Å–±—Ä–æ—Å–∏–ª —Å–≤–æ—ë –∏–º—è –≤ {formtype} –Ω–∞ {formLink(self.id, name)}.')
                        admiss = checkSpelling(argl)
                        if admiss:
                            updateUser(self.id, keytype, '=', args[1])
                            return self.echo(f'‚úÖÔ∏è –¢—ã –∏–∑–º–µ–Ω–∏–ª –∏–º—è –≤ {formtype} –Ω–∞ {formLink()}.')
                        else:
                            return self.echo(f'‚úã {self.name}, —ç—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.\nüí≠–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –Ω–∏–∫–Ω–µ–π–º—ã —Å–æ—Å—Ç–æ—è—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∏–º–µ—é—Ç –¥–ª–∏–Ω—É –Ω–µ –º–µ–Ω–µ–µ –¥–≤—É—Ö –∏ –Ω–µ –±–æ–ª–µ–µ 40 —Å–∏–º–≤–æ–ª–æ–≤.')
                    else:
                        return self.echo(f'‚úã {self.name}, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –∏–º—è, —Ç–∞–∫–æ–µ —É–∂–µ –∑–∞–Ω—è—Ç–æ.\nüí≠ –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ—ë –∏–º—è –Ω–∞ —Å–≤–æ–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ, —Ç–æ –Ω–∞–±–µ—Ä–∏ –≤ –∫–æ–Ω—Ü–µ "—Å–±—Ä–æ—Å–∏—Ç—å".')
                return self.echo(f'üí≠ {self.name}, –≤ {formtype} —è –∑–æ–≤—É —Ç–µ–±—è {names[self.id]}.')

        elif cmd == '–∑–∞–º–µ—Ç–∫–∞':
            if not argl:
                return self.echo(self.cmdsinfo['–∑–∞–º–µ—Ç–∫–∞'])
            if len(argl) > 120:
                return self.echo(f'‚úã {self.name}, –∑–∞–º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–æ–π –Ω–µ –±–æ–ª–µ–µ 120 —Å–∏–º–≤–æ–ª–æ–≤.')
            if argl == '-':
                updateUser(self.id, 'tip', '=', '')
                return self.echo(f'‚úÖ {self.name}, —Ç—ã —Å–±—Ä–æ—Å–∏–ª —Å–≤–æ—é –∑–∞–º–µ—Ç–∫—É –≤ —Å—Ç–∞—Ç—É—Å–µ.')
            updateUser(self.id, 'tip', '=', argl.replace('"', '\"'))
            return self.echo(f'‚úÖ {self.name}, —Ç—ã –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ—é –∑–∞–º–µ—Ç–∫—É –≤ —Å—Ç–∞—Ç—É—Å–µ.')

        elif cmd == '–ø–∞—Ä–∞':
            if self.peer == self.id:
                return self.echo(f'{self.name}, —Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö üòî')
            try:
                people = vk.messages.getConversationMembers(peer_id = self.peer)['profiles']
            except Exception:
                flag = False
                return self.echo(f'{self.name}, —Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üòî')
            if self.reply:
                t = self.reply['from_id']
            else:
                t = self.id
            t = t['id'] if type(t) == type({}) else t
            if t == self.id:
                self.echo(f'üîç {self.name}, –∏—â—É —Ç–µ–±–µ –ø–∞—Ä—É...')
            else:
                self.echo(f'üîç {self.name}, –∏—â—É –ø–∞—Ä—É –¥–ª—è {getNamel(t)}...')
            t = {
                'id': t,
                'name': self.name if t == self.id else getNamel(t)
            }
            pt = choice(people)
            while pt['id'] == t['id']:
                pt = choice(people)
            pt = {
                'name': self.name if pt['id'] == self.id else getNamel(pt['id'])
            }
            mformatted = choice([
                '–î—É–º–∞—é, —á—Ç–æ {} –∏ {} - –æ—Ç–ª–∏—á–Ω–∞—è –ø–∞—Ä–∞ ‚ù§',
                '{}, —Ç–µ–±–µ –æ—á–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç {}, —è —É–≤–µ—Ä–µ–Ω–∞ üíô',
                '–ù–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–ª, –Ω–æ {} –∏ {} —É–∂–µ –¥–∞–≤–Ω–æ –Ω—Ä–∞–≤—è—Ç—Å—è –¥—Ä—É–≥ –¥—Ä—É–≥—É üíõ'
            ]).format(t['name'], pt['name'])
            return self.echo(mformatted)
        
        elif cmd == '–≥–∏—Ñ':
            if not argl:
                return self.echo(self.cmdsinfo['–≥–∏—Ñ'])
            c = None
            f = True
            if len(args) > 1:
                if not args[1].isdigit():
                    if not 1 <= int(args[1]) <= 100:
                        f = False
                else:
                    if 1 <= int(args[1]) <= 100:
                        c = int(args[1])
            if f:
                self.echo(f'{self.name}, –∏—â—É –≥–∏—Ñ–∫—É –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É üîç')
                gif = getgif(
                    'https://api.giphy.com/v1/gifs/search?api_key=wZz52MVyc5G3r5CPKFYNgXl7vgIRwvzo&q=' + argl,
                    c if c else 10
                )
                if gif:
                    return self.echo(f'{formLink(self.id, "‚úÖ")}:', attach=(uploadfile(gif, self.peer)))
                else:
                    return self.echo(f'{self.name}, –≥–∏—Ñ–æ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É "{argl}" –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å üòî')
            return self.echo(self.cmdsinfo['–≥–∏—Ñ'])

        elif cmd == '—é—Ç—É–±':
            if not argl:
                return self.echo(self.cmdsinfo['—é—Ç—É–±'])
            else:
                self.echo(f'üîç {self.name}, –∏—â—É –≤–∏–¥–µ–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É...')
                res = json.loads(YoutubeSearch(argl, max_results=10).to_json())['videos']
                if not res:
                    return self.echo(f'{self.name}, –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É "{argl}" –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å üòî')
                else:
                    videodata = choice(res)
                    video = vk_user.video.save(name=videodata['title'], is_private=1, wallpost = 0, link=f'youtube.com{videodata["link"]}')
                    requests.get(video['upload_url'])
                    return self.echo(f'{formLink(id_, "‚úÖ")}:', attach=(f'video{video["owner_id"]}_{video["video_id"]}'))

        elif cmd == '—Å—Ç–∞—Ç—É—Å':
            flag = 0
            uid = self.id
            name = self.name
            if self.reply:
                uid = self.reply['from_id']
            if uid == self.id:
                flag = 1
            user = getUser(uid)
            if uid > 0:
                resp = vk.users.get(user_ids=uid, fields='screen_name')[0]
                if 'screen_name' not in resp:
                    screenname = f'id{uid}'
                else:
                    screenname = resp['screen_name']
            else:
                resp = vk.groups.getById(group_ids=int(str(uid)[1:]), fields='screen_name')[0]
                if 'screen_name' not in resp:
                    screenname = f'club{str(uid)[1:]}'
                else:
                    screenname = resp['screen_name']
            chatlvl = user['chatscore'] // 50
            gamelvl = user['gamescore'] // 10
            if chatlvl > chatmaxlvl:
                chatlvl = chatmaxlvl
            if gamelvl > gamemaxlvl:
                gamelvl = gamemaxlvl
            chatrank = chatranks[chatlvl // 5 * 5]
            gamerank = gameranks[gamelvl // 5 * 5]
            tip = f'"{user["tip"]}"' if user["tip"] else ''
            form = [
                f'–¢–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è - {user["reps"]} ü§ùüèª {user["likes"]} üíô',
                f'–£ —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É - {user["balance"]} üåÄ',
                f'–¢–≤–æ—ë –∏–≥—Ä–æ–≤–æ–µ –∏–º—è - {user["playname"]}',
                f'–¢–≤–æ–π —Ä–∞–Ω–≥ –≤ —á–∞—Ç–µ - {chatrank}, {chatlvl} —É—Ä.',
                f'–ê –∏–≥—Ä–æ–≤–æ–π —Ä–∞–Ω–≥ - {gamerank}, {gamelvl} —É—Ä.',
                '',
                'üí≠ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –∫–æ–º–º–∞–Ω–¥–µ "–ø–æ–º–æ—â—å".' 
            ]
            form = '\n'.join(form)
            if flag:
                return self.echo(
                    f'üëãüèª {self.name}: {tip}\n{form}',
                    keyboard=keyboard(
                        [(f'ü§ù @{screenname}', 'positive'), (f'‚ù§ @{screenname}', 'positive')],
                        [('–ò–º—è —Å–±—Ä–æ—Å–∏—Ç—å', 'secondary'), ('–ò–º—è –∏–≥—Ä–æ–≤–æ–µ —Å–±—Ä–æ—Å–∏—Ç—å', 'secondary')],
                    )
                )
            else:
                return self.echo(
                    f'üëãüèª {getUser(uid, key="name")}: {tip}\n{form}',
                    keyboard=keyboard(
                        [(f'ü§ù @{screenname}', 'positive'), (f'‚ù§ @{screenname}', 'positive')]
                    )
                )

        elif cmd == '–º–∞–≥–∞–∑–∏–Ω':
            self.echo('–°–∫–æ—Ä–æ.')

        elif cmd == '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å':
            self.echo('–°–∫–æ—Ä–æ.')

        elif cmd == '–ø–æ–º–æ—â—å':
            if argl:
                if argl not in self.cmdsinfo.keys():
                    return self.echo(f'{self.name}, —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–∞–Ω–¥ üòî\n–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –≤–≤–µ–¥–∏ "–ø–æ–º–æ—â—å".')
                return self.echo(self.cmdsinfo[argl])
            else:
                form = ', '.join(list(self.cmdsinfo.keys()))
                return self.echo(
                    f'{self.name}, —ç—Ç–æ –Ω–µ–±–æ–ª—å—à–æ–µ FAQ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ üëá\n\n',
                    f'üí≠ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ - {form}.\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –æ—Ç–ø—Ä–∞–≤—å "–ø–æ–º–æ—â—å" –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ø–æ–º–æ—â—å –≥–∏—Ñ".\n\n'
                    'üí≠ –†–µ–ø—É—Ç–∞—Ü–∏—è - —ç—Ç–æ –≤–∞—à–∏ –ª–∞–π–∫–∏ –∏ —É–≤–∞–∂–µ–Ω–∏–µ. –ß—Ç–æ–±—ã –ª–∞–π–∫–Ω—É—Ç—å –∏–ª–∏ —Ä–µ—Å–ø–µ–∫—Ç–Ω—É—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É. –ò–Ω–æ–≥–¥–∞ –±–æ—Ç —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–æ–≥–¥–∞ —É–≤–∞–∂–∞–µ—Ç–µ –∏–ª–∏ –ª–∞–π–∫–∞–π—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n'
                    'üí≠ –í–∞–ª—é—Ç–∞, –∏–ª–∏ –∂–µ üåÄ, –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∞–∑—É—Ä–∞–º–∏ –∏–ª–∏ –∞–∑—É—Ä–∏–∫–∞–º–∏. –ò—Ö –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∏–≥—Ä, –∞ –Ω–∞ –Ω–∏—Ö —É–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ.\n\n'
                    'üí≠ –†–∞–Ω–≥–∏ - —ç—Ç–æ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è. –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ 50 —É—Ä–æ–≤–Ω–µ–π, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å 10 —Ä–∞–Ω–≥–æ–≤. –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ —á–∞—Ç–µ –≤–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∑–∞ 50 –æ—á–∫–æ–≤, 1 –æ—á–∫–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–∞ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ 3 –æ—á–∫–∞ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É (–∫–æ–º–∞–Ω–¥–∞). –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ –∏–≥—Ä–∞—Ö –≤–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∑–∞ 10 –æ—á–∫–æ–≤, 5 –æ—á–∫–æ–≤ –∑–∞ 1 –ø–æ–±–µ–¥—É.'
                )

        elif cmd == '—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ':
            if not args:
                return self.echo(self.cmdsinfo['—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ'])
            if argl not in ['–≤—ã–∫–ª', '–≤–∫–ª']:
                return self.echo(self.cmdsinfo[argl])
            if argl == '–≤—ã–∫–ª':
                updateUser(self.id, 'mention', '=', 0)
                return self.echo(f'‚úÖ {self.name}, —Ç–µ–ø–µ—Ä—å —è –Ω–µ –±—É–¥—É @—É–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.')
            elif argl == '–≤–∫–ª':
                updateUser(self.id, 'mention', '=', 1)
                return self.echo(f'‚úÖ {self.name}, —Ç–µ–ø–µ—Ä—å —è –±—É–¥—É @—É–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.')

        elif cmd == '—á–∏—Å–ª–æ':
            if len(args) < 3:
                if not args[1].isnumeric():
                    return self.echo(f'‚úã {self.name}, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
                en = int(args[1])
            if len(args) >= 3:
                if not args[1].isnumeric() or not args[2].isnumeric():
                    return self.echo(f'‚úã {self.name}, —É–∫–∞–∂–∏ —á–∏—Å–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
                sn = int(args[1])
                en = int(args[1])
            roll = randint(sn, en)
            return self.echo(f'üé≤ {self.name}, —Ä—É–ª–µ—Ç–∫–∞ –≤—ã–¥–∞–ª–∞ {roll}.')
        
        repkeys = ['+', '—É–≤–∞–∂–∞—é', '—É–≤–æ–∂–∞—é', '—É–≤–∞–∂–µ–Ω–∏–µ', '—É–≤–æ–∂–µ–Ω–∏–µ', '—Ä–µ—Å–ø–µ–∫—Ç', 'ü§ùüèª', '—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ', '—Å–ø—Ä–æ–≤–µ–¥–ª–∏–≤–æ', '—Å–ø—Ä–∞–≤–µ–±—ã–¥–ª–æ', '—Å–ø—Ä–æ–≤–µ–±—ã–¥–ª–æ', 'F']
        likekeys = list('‚ù§üíúüíõüíöüíôüñ§üíïüíü‚ù£üíòüíùüíñüíóüíìüíûüëç') + ['–ª—é–±–ª—é', '–ª–∞–≤']
        for w in msg.lower().split():
            for i in repkeys:
                if i in w.lower():
                    if self.reply:
                        uid = self.reply['from_id']
                        if uid == self.id:
                            return self.echo(f'{self.name}, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–∞–∂–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ üòî')
                        if self.id in getUser(uid, key='repsids'):
                            return self.echo(f'{self.name}, —Ç—ã —É–∂–µ –æ–∫–∞–∑—ã–≤–∞–ª —É–≤–∞–∂–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é üòî')
                        updateUser(uid, 'reps', '+=', 1)
                        updateUser(uid, 'repsids', '+=', [self.id])
                        return self.echo(f'{formLink(uid, "+ü§ù")} –æ—Ç {self.name}.')
            for i in likekeys:
                if i in w.lower():
                    if self.reply:
                        uid = self.reply['from_id']
                        if uid == self.id:
                            return self.echo(f'{self.name}, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ª–∞–π–∫–Ω—É—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è üòî')
                        if self.id in getUser(uid, key='likesids'):
                            return self.echo(f'{self.name}, —Ç—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üòî')
                        updateUser(uid, 'likes', '+=', 1)
                        updateUser(uid, 'likesids', '+=', [self.id])
                        return self.echo(f'{formLink(uid, "+‚ù§")} –æ—Ç {self.name}.')

        if DEBUG:
            admin(cmd, argl, args)
        
        if cmd not in self.cmdsinfo.keys():
            words = openjson('words.json')
            for word in [i.lower() for i in msg.split()]:
                if not [i for i in word if i in '[]|@/()<>$%&']:
                    words['words'].append(''.join([i for i in word if i not in '.,?.;:"']))
            rewritejson('words.json', words)


    def perform(self, msg):
        try:
            self.handle(msg)
        except Exception as e:
            if DEBUG:
                log(e)




from hidden import *


bot_session = vk_api.VkApi(token=token)
user_session = vk_api.VkApi(token=usertoken)
vk = bot_session.get_api()
vk_user = user_session.get_api()


if DEBUG:
    print('loaded')


class mainThread(VkBotLongPoll):
    def listen(self):
        while True:
            try:                
                for event in self.check():
                    yield event
            except Exception as e:
                print('error', e)


for event in mainThread(bot_session, 187703257).listen():
    if event.type == VkBotEventType.MESSAGE_NEW:
        e = event.obj
        etext = e['text']
        epeer = e['peer_id']
        echat = None
        if event.from_chat:
            echat = int(event.chat_id)
        efrom = e['from_id']
        reply = None
        if e['fwd_messages']:
            reply = e['fwd_messages'][0]
        else:
            if 'reply_message' in e:
                reply = e['reply_message']  
        updateUser(efrom, 'chatscore', '+=', 1)
        if efrom > 0:
            if etext:
                if DEBUG:
                    sleep(etext, efrom)
                else:
                    bot = Bot(efrom, epeer, echat, reply)
                    Thread(target=bot.perform, args=(etext,)).start()